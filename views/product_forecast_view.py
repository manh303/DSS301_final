import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from controllers.revenue_forecast_controller import RevenueForecastController

class RevenueForecastView:
    def __init__(self, controller):
        self.controller = controller

    def display(self):
        st.title("üîÆ D·ª± b√°o Doanh thu S·∫£n ph·∫©m theo Th√°ng")

        uploaded_file = st.file_uploader("üìÇ Ch·ªçn file CSV d·ªØ li·ªáu", type=["csv"])
        if uploaded_file:
            df = pd.read_csv(uploaded_file, encoding="ISO-8859-1")

            # Chu·∫©n h√≥a c·ªôt ng√†y
            if "Date" not in df.columns:
                if "InvoiceDate" in df.columns:
                    df.rename(columns={"InvoiceDate": "Date"}, inplace=True)
                    st.info("‚úÖ ƒê√£ ƒë·ªïi t√™n c·ªôt 'InvoiceDate' th√†nh 'Date'")
                else:
                    st.error("‚ùå Thi·∫øu c·ªôt 'Date' ho·∫∑c 'InvoiceDate'")
                    return

            df["Date"] = pd.to_datetime(df["Date"], errors="coerce")
            df = df.dropna(subset=["Date"])

            # Ki·ªÉm tra v√† t√≠nh Revenue n·∫øu c·∫ßn
            if "Revenue" not in df.columns:
                if "Quantity" in df.columns and "UnitPrice" in df.columns:
                    df["Revenue"] = df["Quantity"] * df["UnitPrice"]
                    st.info("‚úÖ ƒê√£ t·ª± ƒë·ªông t√≠nh c·ªôt Revenue")
                else:
                    st.error("‚ùå Thi·∫øu c·ªôt Revenue ho·∫∑c Quantity + UnitPrice")
                    return

            if "StockCode" not in df.columns or "Country" not in df.columns:
                st.error("‚ùå Thi·∫øu c·ªôt StockCode ho·∫∑c Country")
                return

            stock_codes = sorted(df["StockCode"].dropna().unique())
            countries = sorted(df["Country"].dropna().unique())

            if not stock_codes or not countries:
                st.error("‚ùå Kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ ph√¢n t√≠ch.")
                return

            col1, col2 = st.columns(2)
            stock_code = col1.selectbox("üé¢ Ch·ªçn s·∫£n ph·∫©m", stock_codes)
            country = col2.selectbox("üåé Ch·ªçn qu·ªëc gia", countries)
            forecast_months = st.number_input("üìÜ S·ªë th√°ng c·∫ßn d·ª± b√°o", min_value=1, value=3, step=1)
            threshold = st.number_input("‚ö†Ô∏è Ng∆∞·ª°ng c·∫£nh b√°o (%)", min_value=0.0, value=10.0, step=1.0)

            # Kh·ªüi t·∫°o controller t·ª´ dataframe
            self.controller = RevenueForecastController(df)

            if st.button("üöÄ Ch·∫°y d·ª± b√°o"):
                forecast, monthly = self.controller.get_forecast(stock_code, country, forecast_months)

                if forecast is None:
                    st.error("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p.")
                else:
                    forecast_result = pd.DataFrame({
                        "Th√°ng d·ª± b√°o": forecast["ds"].dt.strftime("%m/%Y"),
                        "Doanh thu d·ª± b√°o": forecast["yhat"],
                        "Ch√™nh l·ªách": forecast["delta"],
                        "So v·ªõi TB 3T (%)": forecast["pct_change"]
                    })

                    st.subheader("üìä K·∫øt qu·∫£ D·ª± b√°o")
                    st.dataframe(forecast_result)

                    st.subheader("üìà Bi·ªÉu ƒë·ªì D·ª± b√°o")
                    fig, ax = plt.subplots(figsize=(10, 4))
                    ax.plot(forecast["ds"], forecast["yhat"], marker='o', label="D·ª± b√°o")
                    ax.set_xlabel("Th·ªùi gian")
                    ax.set_ylabel("Doanh thu d·ª± b√°o")
                    ax.set_title("Di·ªÖn bi·∫øn doanh thu d·ª± b√°o")
                    ax.legend()
                    st.pyplot(fig)

def render_product_forecast_analysis(df):
    view = RevenueForecastView(None)
    view.display()
