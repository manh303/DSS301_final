import streamlit as st
import pandas as pd
from statsmodels.tsa.holtwinters import ExponentialSmoothing
import matplotlib.pyplot as plt

def render_forecast_analysis(df):
    st.subheader("üìà D·ª± b√°o b√°n h√†ng")

    df = df.dropna(subset=["InvoiceDate", "Quantity", "Description", "StockCode"])
    df["InvoiceDate"] = pd.to_datetime(df["InvoiceDate"])
    df["Label"] = df["Description"] + " (" + df["StockCode"].astype(str) + ")"

    with st.form("forecast_form"):
        st.markdown("### üîß Nh·∫≠p th√¥ng tin ph√¢n t√≠ch d·ª± b√°o")
        product = st.selectbox("Ch·ªçn s·∫£n ph·∫©m", df["Label"].unique())

        col1, col2 = st.columns(2)
        with col1:
            months_to_forecast = st.number_input("S·ªë th√°ng c·∫ßn d·ª± b√°o", min_value=1, max_value=12, value=6)
        with col2:
            threshold_quantity = st.number_input("Ng∆∞·ª°ng s·ªë l∆∞·ª£ng b√°n c·∫ßn chu·∫©n b·ªã", min_value=1, value=100)

        submitted = st.form_submit_button("üìä Th·ª±c hi·ªán d·ª± b√°o")

    if submitted:
        product_df = df[df["Label"] == product]
        product_df = product_df.groupby(pd.Grouper(key="InvoiceDate", freq="M"))["Quantity"].sum().reset_index()

        if len(product_df) < 3:
            st.error("‚ùå Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ d·ª± b√°o. C·∫ßn √≠t nh·∫•t 3 th√°ng.")
            return

        # Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu
        with st.expander("üìÑ D·ªØ li·ªáu ƒë·∫ßu v√†o"):
            st.dataframe(product_df)

        # Ch·ªçn m√¥ h√¨nh ph√π h·ª£p
        if len(product_df) >= 24:
            model = ExponentialSmoothing(product_df["Quantity"], seasonal="add", seasonal_periods=12).fit()
        else:
            model = ExponentialSmoothing(product_df["Quantity"], trend="add").fit()

        forecast = model.forecast(months_to_forecast)

        # V·∫Ω bi·ªÉu ƒë·ªì
        st.markdown("### üìä Bi·ªÉu ƒë·ªì d·ª± b√°o")
        fig, ax = plt.subplots()
        ax.plot(product_df["InvoiceDate"], product_df["Quantity"], label="Th·ª±c t·∫ø")
        ax.plot(pd.date_range(product_df["InvoiceDate"].max() + pd.DateOffset(months=1), periods=months_to_forecast, freq="M"), forecast, label="D·ª± b√°o", linestyle="--")
        ax.set_xlabel("Th·ªùi gian")
        ax.set_ylabel("S·ªë l∆∞·ª£ng b√°n")
        ax.legend()
        st.pyplot(fig)

        # Tabs DSS v√† G·ª£i √Ω h√†nh ƒë·ªông
        tab1, tab2 = st.tabs(["üìä K·∫øt qu·∫£ DSS", "üí° G·ª£i √Ω h√†nh ƒë·ªông"])
        with tab1:
            st.info(f"Trong {months_to_forecast} th√°ng t·ªõi, t·ªïng doanh s·ªë d·ª± b√°o l√† `{forecast.sum():.0f}` s·∫£n ph·∫©m.")
        with tab2:
            if forecast.mean() > threshold_quantity:
                st.success("‚úÖ D·ª± b√°o b√°n v∆∞·ª£t m·ª©c k·ª≥ v·ªçng. N√™n chu·∫©n b·ªã th√™m h√†ng t·ªìn kho.")
            else:
                st.warning("üìâ Doanh s·ªë d·ª± b√°o th·∫•p h∆°n m·ª©c k·ª≥ v·ªçng. C·∫ßn chi·∫øn d·ªãch k√≠ch c·∫ßu.")

    else:
        st.info("üì• Vui l√≤ng nh·∫≠p th√¥ng tin v√† b·∫•m n√∫t ƒë·ªÉ th·ª±c hi·ªán d·ª± b√°o.")
