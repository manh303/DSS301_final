import streamlit as st
import pandas as pd
import os
from models.rfm_model import RFMModel
from views.ui import UIView

class MainController:
    """Controller class for application flow control"""
    
    def __init__(self):
        """Initialize controller with model and view"""
        self.model = RFMModel()
        self.view = UIView()
        self.default_data_path = "data/online_retail.csv"

    def run(self):
        """
        Run the main application and handle navigation
        """
        # Hi·ªÉn th·ªã m√†n h√¨nh c·∫•u h√¨nh v√† nh·∫≠n c·∫•u h√¨nh
        k, ref_date, country, revenue_target = self.view.config_page()
        
        # N√∫t ph√¢n t√≠ch d·ªØ li·ªáu
        analyze_button = st.button("üîç Ph√¢n t√≠ch d·ªØ li·ªáu", type="primary")
        
        if analyze_button:
            self.analyze_data(k, ref_date, country, revenue_target)
    
    def analyze_data(self, k, ref_date, country, revenue_target):
        """
        Ph√¢n t√≠ch d·ªØ li·ªáu v√† hi·ªÉn th·ªã k·∫øt qu·∫£
        """
        st.markdown("---")
        st.subheader("üìà K·∫øt qu·∫£ ph√¢n t√≠ch")
        
        with st.spinner("ƒêang x·ª≠ l√Ω d·ªØ li·ªáu..."):
            # Ki·ªÉm tra n·∫øu file m·∫∑c ƒë·ªãnh t·ªìn t·∫°i
            if os.path.exists(self.default_data_path):
                try:
                    # ƒê·ªçc v√† x·ª≠ l√Ω d·ªØ li·ªáu v·ªõi b·ªô l·ªçc ng√†y tham chi·∫øu
                    df, latest_date = self.model.load_data_from_path(self.default_data_path, country, ref_date)
                    
                    # Ki·ªÉm tra d·ªØ li·ªáu
                    if df.empty:
                        st.error("‚ùå D·ªØ li·ªáu giao d·ªãch r·ªóng. Vui l√≤ng ki·ªÉm tra l·∫°i file CSV.")
                        return
                        
                    # Calculate RFM and perform clustering
                    rfm = self.model.calculate_rfm(df, ref_date)
                    
                    # Ki·ªÉm tra k·∫øt qu·∫£ RFM
                    if rfm.empty:
                        st.error("‚ùå Kh√¥ng th·ªÉ t√≠nh to√°n RFM t·ª´ d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra l·∫°i file CSV.")
                        return
                    
                    clustered = self.model.cluster_rfm(rfm.copy(), k)
                    
                    # Ki·ªÉm tra k·∫øt qu·∫£ ph√¢n c·ª•m
                    if clustered.empty:
                        st.error("‚ùå Kh√¥ng th·ªÉ ph√¢n c·ª•m kh√°ch h√†ng. Vui l√≤ng ki·ªÉm tra l·∫°i d·ªØ li·ªáu.")
                        return
                    
                    summary = self.model.cluster_summary(clustered)
                    
                    # Calculate monthly revenue for each cluster
                    monthly_revenue = self.model.calculate_monthly_revenue(df, clustered)
                    
                    # Pass revenue_target, latest_date and monthly_revenue to the view
                    self.view.analysis_page(clustered, summary, revenue_target, latest_date, monthly_revenue)
                    
                except Exception as e:
                    st.error(f"‚ùå L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu: {str(e)}")
            else:
                st.error(f"‚ùå Kh√¥ng t√¨m th·∫•y file d·ªØ li·ªáu t·∫°i {self.default_data_path}")